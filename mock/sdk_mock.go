// Code generated by MockGen. DO NOT EDIT.
// Source: .//sdk_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	crypto "chainmaker.org/chainmaker/common/crypto"
	accesscontrol "chainmaker.org/chainmaker/pb-go/accesscontrol"
	common "chainmaker.org/chainmaker/pb-go/common"
	config "chainmaker.org/chainmaker/pb-go/config"
	discovery "chainmaker.org/chainmaker/pb-go/discovery"
	store "chainmaker.org/chainmaker/pb-go/store"
	syscontract "chainmaker.org/chainmaker/pb-go/syscontract"
	gomock "github.com/golang/mock/gomock"
)

// MockSDKInterface is a mock of SDKInterface interface.
type MockSDKInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSDKInterfaceMockRecorder
}

// MockSDKInterfaceMockRecorder is the mock recorder for MockSDKInterface.
type MockSDKInterfaceMockRecorder struct {
	mock *MockSDKInterface
}

// NewMockSDKInterface creates a new mock instance.
func NewMockSDKInterface(ctrl *gomock.Controller) *MockSDKInterface {
	mock := &MockSDKInterface{ctrl: ctrl}
	mock.recorder = &MockSDKInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSDKInterface) EXPECT() *MockSDKInterfaceMockRecorder {
	return m.recorder
}

// AddCert mocks base method.
func (m *MockSDKInterface) AddCert() (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCert")
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCert indicates an expected call of AddCert.
func (mr *MockSDKInterfaceMockRecorder) AddCert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCert", reflect.TypeOf((*MockSDKInterface)(nil).AddCert))
}

// CheckCallerCertAuth mocks base method.
func (m *MockSDKInterface) CheckCallerCertAuth(payload string, orgIds []string, signPairs []*syscontract.SignInfo) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCallerCertAuth", payload, orgIds, signPairs)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCallerCertAuth indicates an expected call of CheckCallerCertAuth.
func (mr *MockSDKInterfaceMockRecorder) CheckCallerCertAuth(payload, orgIds, signPairs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCallerCertAuth", reflect.TypeOf((*MockSDKInterface)(nil).CheckCallerCertAuth), payload, orgIds, signPairs)
}

// CreateArchiveBlockPayload mocks base method.
func (m *MockSDKInterface) CreateArchiveBlockPayload(targetBlockHeight uint64) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArchiveBlockPayload", targetBlockHeight)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArchiveBlockPayload indicates an expected call of CreateArchiveBlockPayload.
func (mr *MockSDKInterfaceMockRecorder) CreateArchiveBlockPayload(targetBlockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArchiveBlockPayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateArchiveBlockPayload), targetBlockHeight)
}

// CreateCertManageFrozenPayload mocks base method.
func (m *MockSDKInterface) CreateCertManageFrozenPayload(certs []string) *common.Payload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertManageFrozenPayload", certs)
	ret0, _ := ret[0].(*common.Payload)
	return ret0
}

// CreateCertManageFrozenPayload indicates an expected call of CreateCertManageFrozenPayload.
func (mr *MockSDKInterfaceMockRecorder) CreateCertManageFrozenPayload(certs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertManageFrozenPayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateCertManageFrozenPayload), certs)
}

// CreateCertManagePayload mocks base method.
func (m *MockSDKInterface) CreateCertManagePayload(method string, kvs []*common.KeyValuePair) *common.Payload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertManagePayload", method, kvs)
	ret0, _ := ret[0].(*common.Payload)
	return ret0
}

// CreateCertManagePayload indicates an expected call of CreateCertManagePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateCertManagePayload(method, kvs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertManagePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateCertManagePayload), method, kvs)
}

// CreateCertManageRevocationPayload mocks base method.
func (m *MockSDKInterface) CreateCertManageRevocationPayload(certCrl string) *common.Payload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertManageRevocationPayload", certCrl)
	ret0, _ := ret[0].(*common.Payload)
	return ret0
}

// CreateCertManageRevocationPayload indicates an expected call of CreateCertManageRevocationPayload.
func (mr *MockSDKInterfaceMockRecorder) CreateCertManageRevocationPayload(certCrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertManageRevocationPayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateCertManageRevocationPayload), certCrl)
}

// CreateCertManageUnfrozenPayload mocks base method.
func (m *MockSDKInterface) CreateCertManageUnfrozenPayload(certs []string) *common.Payload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertManageUnfrozenPayload", certs)
	ret0, _ := ret[0].(*common.Payload)
	return ret0
}

// CreateCertManageUnfrozenPayload indicates an expected call of CreateCertManageUnfrozenPayload.
func (mr *MockSDKInterfaceMockRecorder) CreateCertManageUnfrozenPayload(certs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertManageUnfrozenPayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateCertManageUnfrozenPayload), certs)
}

// CreateChainConfigBlockUpdatePayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigBlockUpdatePayload(txTimestampVerify bool, txTimeout, blockTxCapacity, blockSize, blockInterval uint32) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigBlockUpdatePayload", txTimestampVerify, txTimeout, blockTxCapacity, blockSize, blockInterval)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigBlockUpdatePayload indicates an expected call of CreateChainConfigBlockUpdatePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigBlockUpdatePayload(txTimestampVerify, txTimeout, blockTxCapacity, blockSize, blockInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigBlockUpdatePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigBlockUpdatePayload), txTimestampVerify, txTimeout, blockTxCapacity, blockSize, blockInterval)
}

// CreateChainConfigConsensusExtAddPayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigConsensusExtAddPayload(kvs []*common.KeyValuePair) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigConsensusExtAddPayload", kvs)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigConsensusExtAddPayload indicates an expected call of CreateChainConfigConsensusExtAddPayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigConsensusExtAddPayload(kvs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigConsensusExtAddPayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigConsensusExtAddPayload), kvs)
}

// CreateChainConfigConsensusExtDeletePayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigConsensusExtDeletePayload(keys []string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigConsensusExtDeletePayload", keys)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigConsensusExtDeletePayload indicates an expected call of CreateChainConfigConsensusExtDeletePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigConsensusExtDeletePayload(keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigConsensusExtDeletePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigConsensusExtDeletePayload), keys)
}

// CreateChainConfigConsensusExtUpdatePayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigConsensusExtUpdatePayload(kvs []*common.KeyValuePair) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigConsensusExtUpdatePayload", kvs)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigConsensusExtUpdatePayload indicates an expected call of CreateChainConfigConsensusExtUpdatePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigConsensusExtUpdatePayload(kvs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigConsensusExtUpdatePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigConsensusExtUpdatePayload), kvs)
}

// CreateChainConfigConsensusNodeIdAddPayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigConsensusNodeIdAddPayload(nodeOrgId string, nodeIds []string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigConsensusNodeIdAddPayload", nodeOrgId, nodeIds)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigConsensusNodeIdAddPayload indicates an expected call of CreateChainConfigConsensusNodeIdAddPayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigConsensusNodeIdAddPayload(nodeOrgId, nodeIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigConsensusNodeIdAddPayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigConsensusNodeIdAddPayload), nodeOrgId, nodeIds)
}

// CreateChainConfigConsensusNodeIdDeletePayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigConsensusNodeIdDeletePayload(nodeOrgId, nodeId string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigConsensusNodeIdDeletePayload", nodeOrgId, nodeId)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigConsensusNodeIdDeletePayload indicates an expected call of CreateChainConfigConsensusNodeIdDeletePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigConsensusNodeIdDeletePayload(nodeOrgId, nodeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigConsensusNodeIdDeletePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigConsensusNodeIdDeletePayload), nodeOrgId, nodeId)
}

// CreateChainConfigConsensusNodeIdUpdatePayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigConsensusNodeIdUpdatePayload(nodeOrgId, nodeOldNodeId, nodeNewNodeId string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigConsensusNodeIdUpdatePayload", nodeOrgId, nodeOldNodeId, nodeNewNodeId)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigConsensusNodeIdUpdatePayload indicates an expected call of CreateChainConfigConsensusNodeIdUpdatePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigConsensusNodeIdUpdatePayload(nodeOrgId, nodeOldNodeId, nodeNewNodeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigConsensusNodeIdUpdatePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigConsensusNodeIdUpdatePayload), nodeOrgId, nodeOldNodeId, nodeNewNodeId)
}

// CreateChainConfigConsensusNodeOrgAddPayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigConsensusNodeOrgAddPayload(nodeOrgId string, nodeIds []string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigConsensusNodeOrgAddPayload", nodeOrgId, nodeIds)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigConsensusNodeOrgAddPayload indicates an expected call of CreateChainConfigConsensusNodeOrgAddPayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigConsensusNodeOrgAddPayload(nodeOrgId, nodeIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigConsensusNodeOrgAddPayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigConsensusNodeOrgAddPayload), nodeOrgId, nodeIds)
}

// CreateChainConfigConsensusNodeOrgDeletePayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigConsensusNodeOrgDeletePayload(nodeOrgId string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigConsensusNodeOrgDeletePayload", nodeOrgId)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigConsensusNodeOrgDeletePayload indicates an expected call of CreateChainConfigConsensusNodeOrgDeletePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigConsensusNodeOrgDeletePayload(nodeOrgId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigConsensusNodeOrgDeletePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigConsensusNodeOrgDeletePayload), nodeOrgId)
}

// CreateChainConfigConsensusNodeOrgUpdatePayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigConsensusNodeOrgUpdatePayload(nodeOrgId string, nodeIds []string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigConsensusNodeOrgUpdatePayload", nodeOrgId, nodeIds)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigConsensusNodeOrgUpdatePayload indicates an expected call of CreateChainConfigConsensusNodeOrgUpdatePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigConsensusNodeOrgUpdatePayload(nodeOrgId, nodeIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigConsensusNodeOrgUpdatePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigConsensusNodeOrgUpdatePayload), nodeOrgId, nodeIds)
}

// CreateChainConfigCoreUpdatePayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigCoreUpdatePayload(txSchedulerTimeout, txSchedulerValidateTimeout uint64) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigCoreUpdatePayload", txSchedulerTimeout, txSchedulerValidateTimeout)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigCoreUpdatePayload indicates an expected call of CreateChainConfigCoreUpdatePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigCoreUpdatePayload(txSchedulerTimeout, txSchedulerValidateTimeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigCoreUpdatePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigCoreUpdatePayload), txSchedulerTimeout, txSchedulerValidateTimeout)
}

// CreateChainConfigPermissionAddPayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigPermissionAddPayload(permissionResourceName string, policy *accesscontrol.Policy) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigPermissionAddPayload", permissionResourceName, policy)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigPermissionAddPayload indicates an expected call of CreateChainConfigPermissionAddPayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigPermissionAddPayload(permissionResourceName, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigPermissionAddPayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigPermissionAddPayload), permissionResourceName, policy)
}

// CreateChainConfigPermissionDeletePayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigPermissionDeletePayload(permissionResourceName string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigPermissionDeletePayload", permissionResourceName)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigPermissionDeletePayload indicates an expected call of CreateChainConfigPermissionDeletePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigPermissionDeletePayload(permissionResourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigPermissionDeletePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigPermissionDeletePayload), permissionResourceName)
}

// CreateChainConfigPermissionUpdatePayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigPermissionUpdatePayload(permissionResourceName string, policy *accesscontrol.Policy) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigPermissionUpdatePayload", permissionResourceName, policy)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigPermissionUpdatePayload indicates an expected call of CreateChainConfigPermissionUpdatePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigPermissionUpdatePayload(permissionResourceName, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigPermissionUpdatePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigPermissionUpdatePayload), permissionResourceName, policy)
}

// CreateChainConfigTrustRootAddPayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigTrustRootAddPayload(trustRootOrgId, trustRootCrt string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigTrustRootAddPayload", trustRootOrgId, trustRootCrt)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigTrustRootAddPayload indicates an expected call of CreateChainConfigTrustRootAddPayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigTrustRootAddPayload(trustRootOrgId, trustRootCrt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigTrustRootAddPayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigTrustRootAddPayload), trustRootOrgId, trustRootCrt)
}

// CreateChainConfigTrustRootDeletePayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigTrustRootDeletePayload(trustRootOrgId string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigTrustRootDeletePayload", trustRootOrgId)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigTrustRootDeletePayload indicates an expected call of CreateChainConfigTrustRootDeletePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigTrustRootDeletePayload(trustRootOrgId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigTrustRootDeletePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigTrustRootDeletePayload), trustRootOrgId)
}

// CreateChainConfigTrustRootUpdatePayload mocks base method.
func (m *MockSDKInterface) CreateChainConfigTrustRootUpdatePayload(trustRootOrgId, trustRootCrt string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChainConfigTrustRootUpdatePayload", trustRootOrgId, trustRootCrt)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChainConfigTrustRootUpdatePayload indicates an expected call of CreateChainConfigTrustRootUpdatePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateChainConfigTrustRootUpdatePayload(trustRootOrgId, trustRootCrt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChainConfigTrustRootUpdatePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateChainConfigTrustRootUpdatePayload), trustRootOrgId, trustRootCrt)
}

// CreateContractCreatePayload mocks base method.
func (m *MockSDKInterface) CreateContractCreatePayload(contractName, version, byteCode string, runtime common.RuntimeType, kvs []*common.KeyValuePair) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContractCreatePayload", contractName, version, byteCode, runtime, kvs)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContractCreatePayload indicates an expected call of CreateContractCreatePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateContractCreatePayload(contractName, version, byteCode, runtime, kvs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContractCreatePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateContractCreatePayload), contractName, version, byteCode, runtime, kvs)
}

// CreateContractFreezePayload mocks base method.
func (m *MockSDKInterface) CreateContractFreezePayload(contractName string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContractFreezePayload", contractName)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContractFreezePayload indicates an expected call of CreateContractFreezePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateContractFreezePayload(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContractFreezePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateContractFreezePayload), contractName)
}

// CreateContractRevokePayload mocks base method.
func (m *MockSDKInterface) CreateContractRevokePayload(contractName string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContractRevokePayload", contractName)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContractRevokePayload indicates an expected call of CreateContractRevokePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateContractRevokePayload(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContractRevokePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateContractRevokePayload), contractName)
}

// CreateContractUnfreezePayload mocks base method.
func (m *MockSDKInterface) CreateContractUnfreezePayload(contractName string) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContractUnfreezePayload", contractName)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContractUnfreezePayload indicates an expected call of CreateContractUnfreezePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateContractUnfreezePayload(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContractUnfreezePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateContractUnfreezePayload), contractName)
}

// CreateContractUpgradePayload mocks base method.
func (m *MockSDKInterface) CreateContractUpgradePayload(contractName, version, byteCode string, runtime common.RuntimeType, kvs []*common.KeyValuePair) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContractUpgradePayload", contractName, version, byteCode, runtime, kvs)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContractUpgradePayload indicates an expected call of CreateContractUpgradePayload.
func (mr *MockSDKInterfaceMockRecorder) CreateContractUpgradePayload(contractName, version, byteCode, runtime, kvs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContractUpgradePayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateContractUpgradePayload), contractName, version, byteCode, runtime, kvs)
}

// CreateHibeInitParamsTxPayloadParams mocks base method.
func (m *MockSDKInterface) CreateHibeInitParamsTxPayloadParams(orgId string, hibeParams []byte) ([]*common.KeyValuePair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHibeInitParamsTxPayloadParams", orgId, hibeParams)
	ret0, _ := ret[0].([]*common.KeyValuePair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHibeInitParamsTxPayloadParams indicates an expected call of CreateHibeInitParamsTxPayloadParams.
func (mr *MockSDKInterfaceMockRecorder) CreateHibeInitParamsTxPayloadParams(orgId, hibeParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHibeInitParamsTxPayloadParams", reflect.TypeOf((*MockSDKInterface)(nil).CreateHibeInitParamsTxPayloadParams), orgId, hibeParams)
}

// CreateHibeTxPayloadParamsWithHibeParams mocks base method.
func (m *MockSDKInterface) CreateHibeTxPayloadParamsWithHibeParams(plaintext []byte, receiverIds []string, paramsBytesList [][]byte, txId string, keyType crypto.KeyType) ([]*common.KeyValuePair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHibeTxPayloadParamsWithHibeParams", plaintext, receiverIds, paramsBytesList, txId, keyType)
	ret0, _ := ret[0].([]*common.KeyValuePair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHibeTxPayloadParamsWithHibeParams indicates an expected call of CreateHibeTxPayloadParamsWithHibeParams.
func (mr *MockSDKInterfaceMockRecorder) CreateHibeTxPayloadParamsWithHibeParams(plaintext, receiverIds, paramsBytesList, txId, keyType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHibeTxPayloadParamsWithHibeParams", reflect.TypeOf((*MockSDKInterface)(nil).CreateHibeTxPayloadParamsWithHibeParams), plaintext, receiverIds, paramsBytesList, txId, keyType)
}

// CreateHibeTxPayloadParamsWithoutHibeParams mocks base method.
func (m *MockSDKInterface) CreateHibeTxPayloadParamsWithoutHibeParams(contractName, queryParamsMethod string, plaintext []byte, receiverIds, receiverOrgIds []string, txId string, keyType crypto.KeyType, timeout int64) ([]*common.KeyValuePair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHibeTxPayloadParamsWithoutHibeParams", contractName, queryParamsMethod, plaintext, receiverIds, receiverOrgIds, txId, keyType, timeout)
	ret0, _ := ret[0].([]*common.KeyValuePair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHibeTxPayloadParamsWithoutHibeParams indicates an expected call of CreateHibeTxPayloadParamsWithoutHibeParams.
func (mr *MockSDKInterfaceMockRecorder) CreateHibeTxPayloadParamsWithoutHibeParams(contractName, queryParamsMethod, plaintext, receiverIds, receiverOrgIds, txId, keyType, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHibeTxPayloadParamsWithoutHibeParams", reflect.TypeOf((*MockSDKInterface)(nil).CreateHibeTxPayloadParamsWithoutHibeParams), contractName, queryParamsMethod, plaintext, receiverIds, receiverOrgIds, txId, keyType, timeout)
}

// CreateRestoreBlockPayload mocks base method.
func (m *MockSDKInterface) CreateRestoreBlockPayload(fullBlock []byte) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRestoreBlockPayload", fullBlock)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestoreBlockPayload indicates an expected call of CreateRestoreBlockPayload.
func (mr *MockSDKInterfaceMockRecorder) CreateRestoreBlockPayload(fullBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestoreBlockPayload", reflect.TypeOf((*MockSDKInterface)(nil).CreateRestoreBlockPayload), fullBlock)
}

// DecryptHibeTxByTxId mocks base method.
func (m *MockSDKInterface) DecryptHibeTxByTxId(localId string, hibeParams, hibePrvKey []byte, txId string, keyType crypto.KeyType) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptHibeTxByTxId", localId, hibeParams, hibePrvKey, txId, keyType)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptHibeTxByTxId indicates an expected call of DecryptHibeTxByTxId.
func (mr *MockSDKInterfaceMockRecorder) DecryptHibeTxByTxId(localId, hibeParams, hibePrvKey, txId, keyType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptHibeTxByTxId", reflect.TypeOf((*MockSDKInterface)(nil).DecryptHibeTxByTxId), localId, hibeParams, hibePrvKey, txId, keyType)
}

// DeleteCert mocks base method.
func (m *MockSDKInterface) DeleteCert(certHashes []string) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCert", certHashes)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCert indicates an expected call of DeleteCert.
func (mr *MockSDKInterfaceMockRecorder) DeleteCert(certHashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCert", reflect.TypeOf((*MockSDKInterface)(nil).DeleteCert), certHashes)
}

// DisableCertHash mocks base method.
func (m *MockSDKInterface) DisableCertHash() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableCertHash")
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableCertHash indicates an expected call of DisableCertHash.
func (mr *MockSDKInterfaceMockRecorder) DisableCertHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableCertHash", reflect.TypeOf((*MockSDKInterface)(nil).DisableCertHash))
}

// EnableCertHash mocks base method.
func (m *MockSDKInterface) EnableCertHash() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableCertHash")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableCertHash indicates an expected call of EnableCertHash.
func (mr *MockSDKInterfaceMockRecorder) EnableCertHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCertHash", reflect.TypeOf((*MockSDKInterface)(nil).EnableCertHash))
}

// GetArchivedBlockByHash mocks base method.
func (m *MockSDKInterface) GetArchivedBlockByHash(blockHash string, withRWSet bool) (*common.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivedBlockByHash", blockHash, withRWSet)
	ret0, _ := ret[0].(*common.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchivedBlockByHash indicates an expected call of GetArchivedBlockByHash.
func (mr *MockSDKInterfaceMockRecorder) GetArchivedBlockByHash(blockHash, withRWSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivedBlockByHash", reflect.TypeOf((*MockSDKInterface)(nil).GetArchivedBlockByHash), blockHash, withRWSet)
}

// GetArchivedBlockByHeight mocks base method.
func (m *MockSDKInterface) GetArchivedBlockByHeight(blockHeight uint64, withRWSet bool) (*common.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivedBlockByHeight", blockHeight, withRWSet)
	ret0, _ := ret[0].(*common.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchivedBlockByHeight indicates an expected call of GetArchivedBlockByHeight.
func (mr *MockSDKInterfaceMockRecorder) GetArchivedBlockByHeight(blockHeight, withRWSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivedBlockByHeight", reflect.TypeOf((*MockSDKInterface)(nil).GetArchivedBlockByHeight), blockHeight, withRWSet)
}

// GetArchivedBlockByTxId mocks base method.
func (m *MockSDKInterface) GetArchivedBlockByTxId(txId string, withRWSet bool) (*common.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivedBlockByTxId", txId, withRWSet)
	ret0, _ := ret[0].(*common.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchivedBlockByTxId indicates an expected call of GetArchivedBlockByTxId.
func (mr *MockSDKInterfaceMockRecorder) GetArchivedBlockByTxId(txId, withRWSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivedBlockByTxId", reflect.TypeOf((*MockSDKInterface)(nil).GetArchivedBlockByTxId), txId, withRWSet)
}

// GetArchivedBlockHeight mocks base method.
func (m *MockSDKInterface) GetArchivedBlockHeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivedBlockHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchivedBlockHeight indicates an expected call of GetArchivedBlockHeight.
func (mr *MockSDKInterfaceMockRecorder) GetArchivedBlockHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivedBlockHeight", reflect.TypeOf((*MockSDKInterface)(nil).GetArchivedBlockHeight))
}

// GetArchivedFullBlockByHeight mocks base method.
func (m *MockSDKInterface) GetArchivedFullBlockByHeight(blockHeight uint64) (*store.BlockWithRWSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivedFullBlockByHeight", blockHeight)
	ret0, _ := ret[0].(*store.BlockWithRWSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchivedFullBlockByHeight indicates an expected call of GetArchivedFullBlockByHeight.
func (mr *MockSDKInterfaceMockRecorder) GetArchivedFullBlockByHeight(blockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivedFullBlockByHeight", reflect.TypeOf((*MockSDKInterface)(nil).GetArchivedFullBlockByHeight), blockHeight)
}

// GetArchivedTxByTxId mocks base method.
func (m *MockSDKInterface) GetArchivedTxByTxId(txId string) (*common.TransactionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivedTxByTxId", txId)
	ret0, _ := ret[0].(*common.TransactionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchivedTxByTxId indicates an expected call of GetArchivedTxByTxId.
func (mr *MockSDKInterfaceMockRecorder) GetArchivedTxByTxId(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivedTxByTxId", reflect.TypeOf((*MockSDKInterface)(nil).GetArchivedTxByTxId), txId)
}

// GetBlockByHash mocks base method.
func (m *MockSDKInterface) GetBlockByHash(blockHash string, withRWSet bool) (*common.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", blockHash, withRWSet)
	ret0, _ := ret[0].(*common.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockSDKInterfaceMockRecorder) GetBlockByHash(blockHash, withRWSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockSDKInterface)(nil).GetBlockByHash), blockHash, withRWSet)
}

// GetBlockByHeight mocks base method.
func (m *MockSDKInterface) GetBlockByHeight(blockHeight uint64, withRWSet bool) (*common.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", blockHeight, withRWSet)
	ret0, _ := ret[0].(*common.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockSDKInterfaceMockRecorder) GetBlockByHeight(blockHeight, withRWSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockSDKInterface)(nil).GetBlockByHeight), blockHeight, withRWSet)
}

// GetBlockByTxId mocks base method.
func (m *MockSDKInterface) GetBlockByTxId(txId string, withRWSet bool) (*common.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByTxId", txId, withRWSet)
	ret0, _ := ret[0].(*common.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByTxId indicates an expected call of GetBlockByTxId.
func (mr *MockSDKInterfaceMockRecorder) GetBlockByTxId(txId, withRWSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByTxId", reflect.TypeOf((*MockSDKInterface)(nil).GetBlockByTxId), txId, withRWSet)
}

// GetBlockHeaderByHeight mocks base method.
func (m *MockSDKInterface) GetBlockHeaderByHeight(blockHeight uint64) (*common.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeaderByHeight", blockHeight)
	ret0, _ := ret[0].(*common.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeaderByHeight indicates an expected call of GetBlockHeaderByHeight.
func (mr *MockSDKInterfaceMockRecorder) GetBlockHeaderByHeight(blockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeaderByHeight", reflect.TypeOf((*MockSDKInterface)(nil).GetBlockHeaderByHeight), blockHeight)
}

// GetBlockHeightByHash mocks base method.
func (m *MockSDKInterface) GetBlockHeightByHash(blockHash string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeightByHash", blockHash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeightByHash indicates an expected call of GetBlockHeightByHash.
func (mr *MockSDKInterfaceMockRecorder) GetBlockHeightByHash(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeightByHash", reflect.TypeOf((*MockSDKInterface)(nil).GetBlockHeightByHash), blockHash)
}

// GetBlockHeightByTxId mocks base method.
func (m *MockSDKInterface) GetBlockHeightByTxId(txId string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeightByTxId", txId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeightByTxId indicates an expected call of GetBlockHeightByTxId.
func (mr *MockSDKInterfaceMockRecorder) GetBlockHeightByTxId(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeightByTxId", reflect.TypeOf((*MockSDKInterface)(nil).GetBlockHeightByTxId), txId)
}

// GetCertHash mocks base method.
func (m *MockSDKInterface) GetCertHash() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertHash")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertHash indicates an expected call of GetCertHash.
func (mr *MockSDKInterfaceMockRecorder) GetCertHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertHash", reflect.TypeOf((*MockSDKInterface)(nil).GetCertHash))
}

// GetChainConfig mocks base method.
func (m *MockSDKInterface) GetChainConfig() (*config.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainConfig")
	ret0, _ := ret[0].(*config.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainConfig indicates an expected call of GetChainConfig.
func (mr *MockSDKInterfaceMockRecorder) GetChainConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfig", reflect.TypeOf((*MockSDKInterface)(nil).GetChainConfig))
}

// GetChainConfigByBlockHeight mocks base method.
func (m *MockSDKInterface) GetChainConfigByBlockHeight(blockHeight uint64) (*config.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainConfigByBlockHeight", blockHeight)
	ret0, _ := ret[0].(*config.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainConfigByBlockHeight indicates an expected call of GetChainConfigByBlockHeight.
func (mr *MockSDKInterfaceMockRecorder) GetChainConfigByBlockHeight(blockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfigByBlockHeight", reflect.TypeOf((*MockSDKInterface)(nil).GetChainConfigByBlockHeight), blockHeight)
}

// GetChainConfigSequence mocks base method.
func (m *MockSDKInterface) GetChainConfigSequence() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainConfigSequence")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainConfigSequence indicates an expected call of GetChainConfigSequence.
func (mr *MockSDKInterfaceMockRecorder) GetChainConfigSequence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfigSequence", reflect.TypeOf((*MockSDKInterface)(nil).GetChainConfigSequence))
}

// GetChainInfo mocks base method.
func (m *MockSDKInterface) GetChainInfo() (*discovery.ChainInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainInfo")
	ret0, _ := ret[0].(*discovery.ChainInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainInfo indicates an expected call of GetChainInfo.
func (mr *MockSDKInterfaceMockRecorder) GetChainInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainInfo", reflect.TypeOf((*MockSDKInterface)(nil).GetChainInfo))
}

// GetChainMakerServerVersion mocks base method.
func (m *MockSDKInterface) GetChainMakerServerVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainMakerServerVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainMakerServerVersion indicates an expected call of GetChainMakerServerVersion.
func (mr *MockSDKInterfaceMockRecorder) GetChainMakerServerVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainMakerServerVersion", reflect.TypeOf((*MockSDKInterface)(nil).GetChainMakerServerVersion))
}

// GetContract mocks base method.
func (m *MockSDKInterface) GetContract(contractName, codeHash string) (*common.PrivateGetContract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", contractName, codeHash)
	ret0, _ := ret[0].(*common.PrivateGetContract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract.
func (mr *MockSDKInterfaceMockRecorder) GetContract(contractName, codeHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockSDKInterface)(nil).GetContract), contractName, codeHash)
}

// GetCurrentBlockHeight mocks base method.
func (m *MockSDKInterface) GetCurrentBlockHeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBlockHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBlockHeight indicates an expected call of GetCurrentBlockHeight.
func (mr *MockSDKInterfaceMockRecorder) GetCurrentBlockHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBlockHeight", reflect.TypeOf((*MockSDKInterface)(nil).GetCurrentBlockHeight))
}

// GetData mocks base method.
func (m *MockSDKInterface) GetData(contractName, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", contractName, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockSDKInterfaceMockRecorder) GetData(contractName, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockSDKInterface)(nil).GetData), contractName, key)
}

// GetDir mocks base method.
func (m *MockSDKInterface) GetDir(orderId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDir", orderId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDir indicates an expected call of GetDir.
func (mr *MockSDKInterfaceMockRecorder) GetDir(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDir", reflect.TypeOf((*MockSDKInterface)(nil).GetDir), orderId)
}

// GetEnclaveCACert mocks base method.
func (m *MockSDKInterface) GetEnclaveCACert() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnclaveCACert")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnclaveCACert indicates an expected call of GetEnclaveCACert.
func (mr *MockSDKInterfaceMockRecorder) GetEnclaveCACert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnclaveCACert", reflect.TypeOf((*MockSDKInterface)(nil).GetEnclaveCACert))
}

// GetEnclaveChallenge mocks base method.
func (m *MockSDKInterface) GetEnclaveChallenge(enclaveId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnclaveChallenge", enclaveId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnclaveChallenge indicates an expected call of GetEnclaveChallenge.
func (mr *MockSDKInterfaceMockRecorder) GetEnclaveChallenge(enclaveId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnclaveChallenge", reflect.TypeOf((*MockSDKInterface)(nil).GetEnclaveChallenge), enclaveId)
}

// GetEnclaveEncryptPubKey mocks base method.
func (m *MockSDKInterface) GetEnclaveEncryptPubKey(enclaveId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnclaveEncryptPubKey", enclaveId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnclaveEncryptPubKey indicates an expected call of GetEnclaveEncryptPubKey.
func (mr *MockSDKInterfaceMockRecorder) GetEnclaveEncryptPubKey(enclaveId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnclaveEncryptPubKey", reflect.TypeOf((*MockSDKInterface)(nil).GetEnclaveEncryptPubKey), enclaveId)
}

// GetEnclaveProof mocks base method.
func (m *MockSDKInterface) GetEnclaveProof(enclaveId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnclaveProof", enclaveId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnclaveProof indicates an expected call of GetEnclaveProof.
func (mr *MockSDKInterfaceMockRecorder) GetEnclaveProof(enclaveId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnclaveProof", reflect.TypeOf((*MockSDKInterface)(nil).GetEnclaveProof), enclaveId)
}

// GetEnclaveReport mocks base method.
func (m *MockSDKInterface) GetEnclaveReport(enclaveId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnclaveReport", enclaveId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnclaveReport indicates an expected call of GetEnclaveReport.
func (mr *MockSDKInterfaceMockRecorder) GetEnclaveReport(enclaveId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnclaveReport", reflect.TypeOf((*MockSDKInterface)(nil).GetEnclaveReport), enclaveId)
}

// GetEnclaveSignature mocks base method.
func (m *MockSDKInterface) GetEnclaveSignature(enclaveId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnclaveSignature", enclaveId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnclaveSignature indicates an expected call of GetEnclaveSignature.
func (mr *MockSDKInterfaceMockRecorder) GetEnclaveSignature(enclaveId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnclaveSignature", reflect.TypeOf((*MockSDKInterface)(nil).GetEnclaveSignature), enclaveId)
}

// GetEnclaveVerificationPubKey mocks base method.
func (m *MockSDKInterface) GetEnclaveVerificationPubKey(enclaveId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnclaveVerificationPubKey", enclaveId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnclaveVerificationPubKey indicates an expected call of GetEnclaveVerificationPubKey.
func (mr *MockSDKInterfaceMockRecorder) GetEnclaveVerificationPubKey(enclaveId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnclaveVerificationPubKey", reflect.TypeOf((*MockSDKInterface)(nil).GetEnclaveVerificationPubKey), enclaveId)
}

// GetFullBlockByHeight mocks base method.
func (m *MockSDKInterface) GetFullBlockByHeight(blockHeight uint64) (*store.BlockWithRWSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullBlockByHeight", blockHeight)
	ret0, _ := ret[0].(*store.BlockWithRWSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullBlockByHeight indicates an expected call of GetFullBlockByHeight.
func (mr *MockSDKInterfaceMockRecorder) GetFullBlockByHeight(blockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullBlockByHeight", reflect.TypeOf((*MockSDKInterface)(nil).GetFullBlockByHeight), blockHeight)
}

// GetLastBlock mocks base method.
func (m *MockSDKInterface) GetLastBlock(withRWSet bool) (*common.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlock", withRWSet)
	ret0, _ := ret[0].(*common.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBlock indicates an expected call of GetLastBlock.
func (mr *MockSDKInterfaceMockRecorder) GetLastBlock(withRWSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlock", reflect.TypeOf((*MockSDKInterface)(nil).GetLastBlock), withRWSet)
}

// GetLastConfigBlock mocks base method.
func (m *MockSDKInterface) GetLastConfigBlock(withRWSet bool) (*common.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastConfigBlock", withRWSet)
	ret0, _ := ret[0].(*common.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastConfigBlock indicates an expected call of GetLastConfigBlock.
func (mr *MockSDKInterfaceMockRecorder) GetLastConfigBlock(withRWSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastConfigBlock", reflect.TypeOf((*MockSDKInterface)(nil).GetLastConfigBlock), withRWSet)
}

// GetNodeChainList mocks base method.
func (m *MockSDKInterface) GetNodeChainList() (*discovery.ChainList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeChainList")
	ret0, _ := ret[0].(*discovery.ChainList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeChainList indicates an expected call of GetNodeChainList.
func (mr *MockSDKInterfaceMockRecorder) GetNodeChainList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeChainList", reflect.TypeOf((*MockSDKInterface)(nil).GetNodeChainList))
}

// GetTxByTxId mocks base method.
func (m *MockSDKInterface) GetTxByTxId(txId string) (*common.TransactionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxByTxId", txId)
	ret0, _ := ret[0].(*common.TransactionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxByTxId indicates an expected call of GetTxByTxId.
func (mr *MockSDKInterfaceMockRecorder) GetTxByTxId(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxByTxId", reflect.TypeOf((*MockSDKInterface)(nil).GetTxByTxId), txId)
}

// GetTxRequest mocks base method.
func (m *MockSDKInterface) GetTxRequest(contractName, method, txId string, kvs []*common.KeyValuePair) (*common.TxRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxRequest", contractName, method, txId, kvs)
	ret0, _ := ret[0].(*common.TxRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxRequest indicates an expected call of GetTxRequest.
func (mr *MockSDKInterfaceMockRecorder) GetTxRequest(contractName, method, txId, kvs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxRequest", reflect.TypeOf((*MockSDKInterface)(nil).GetTxRequest), contractName, method, txId, kvs)
}

// InvokeContract mocks base method.
func (m *MockSDKInterface) InvokeContract(contractName, method, txId string, kvs []*common.KeyValuePair, timeout int64, withSyncResult bool) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeContract", contractName, method, txId, kvs, timeout, withSyncResult)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeContract indicates an expected call of InvokeContract.
func (mr *MockSDKInterfaceMockRecorder) InvokeContract(contractName, method, txId, kvs, timeout, withSyncResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeContract", reflect.TypeOf((*MockSDKInterface)(nil).InvokeContract), contractName, method, txId, kvs, timeout, withSyncResult)
}

// InvokeSystemContract mocks base method.
func (m *MockSDKInterface) InvokeSystemContract(contractName, method, txId string, kvs []*common.KeyValuePair, timeout int64, withSyncResult bool) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeSystemContract", contractName, method, txId, kvs, timeout, withSyncResult)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeSystemContract indicates an expected call of InvokeSystemContract.
func (mr *MockSDKInterfaceMockRecorder) InvokeSystemContract(contractName, method, txId, kvs, timeout, withSyncResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeSystemContract", reflect.TypeOf((*MockSDKInterface)(nil).InvokeSystemContract), contractName, method, txId, kvs, timeout, withSyncResult)
}

// QueryCert mocks base method.
func (m *MockSDKInterface) QueryCert(certHashes []string) (*common.CertInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCert", certHashes)
	ret0, _ := ret[0].(*common.CertInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCert indicates an expected call of QueryCert.
func (mr *MockSDKInterfaceMockRecorder) QueryCert(certHashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCert", reflect.TypeOf((*MockSDKInterface)(nil).QueryCert), certHashes)
}

// QueryContract mocks base method.
func (m *MockSDKInterface) QueryContract(contractName, method string, kvs []*common.KeyValuePair, timeout int64) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContract", contractName, method, kvs, timeout)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContract indicates an expected call of QueryContract.
func (mr *MockSDKInterfaceMockRecorder) QueryContract(contractName, method, kvs, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContract", reflect.TypeOf((*MockSDKInterface)(nil).QueryContract), contractName, method, kvs, timeout)
}

// QueryHibeParamsWithOrgId mocks base method.
func (m *MockSDKInterface) QueryHibeParamsWithOrgId(contractName, method, orgId string, timeout int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryHibeParamsWithOrgId", contractName, method, orgId, timeout)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryHibeParamsWithOrgId indicates an expected call of QueryHibeParamsWithOrgId.
func (mr *MockSDKInterfaceMockRecorder) QueryHibeParamsWithOrgId(contractName, method, orgId, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHibeParamsWithOrgId", reflect.TypeOf((*MockSDKInterface)(nil).QueryHibeParamsWithOrgId), contractName, method, orgId, timeout)
}

// QuerySystemContract mocks base method.
func (m *MockSDKInterface) QuerySystemContract(contractName, method string, kvs []*common.KeyValuePair, timeout int64) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySystemContract", contractName, method, kvs, timeout)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySystemContract indicates an expected call of QuerySystemContract.
func (mr *MockSDKInterfaceMockRecorder) QuerySystemContract(contractName, method, kvs, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySystemContract", reflect.TypeOf((*MockSDKInterface)(nil).QuerySystemContract), contractName, method, kvs, timeout)
}

// SaveData mocks base method.
func (m *MockSDKInterface) SaveData(contractName, contractVersion string, isDeployment bool, codeHash, reportHash []byte, result *common.ContractResult, codeHeader []byte, txId string, rwSet *common.TxRWSet, sign []byte, events *common.StrSlice, privateReq []byte, withSyncResult bool, timeout int64) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveData", contractName, contractVersion, isDeployment, codeHash, reportHash, result, codeHeader, txId, rwSet, sign, events, privateReq, withSyncResult, timeout)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveData indicates an expected call of SaveData.
func (mr *MockSDKInterfaceMockRecorder) SaveData(contractName, contractVersion, isDeployment, codeHash, reportHash, result, codeHeader, txId, rwSet, sign, events, privateReq, withSyncResult, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveData", reflect.TypeOf((*MockSDKInterface)(nil).SaveData), contractName, contractVersion, isDeployment, codeHash, reportHash, result, codeHeader, txId, rwSet, sign, events, privateReq, withSyncResult, timeout)
}

// SaveDir mocks base method.
func (m *MockSDKInterface) SaveDir(orderId, txId string, privateDir *common.StrSlice, withSyncResult bool, timeout int64) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDir", orderId, txId, privateDir, withSyncResult, timeout)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveDir indicates an expected call of SaveDir.
func (mr *MockSDKInterfaceMockRecorder) SaveDir(orderId, txId, privateDir, withSyncResult, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDir", reflect.TypeOf((*MockSDKInterface)(nil).SaveDir), orderId, txId, privateDir, withSyncResult, timeout)
}

// SaveEnclaveCACert mocks base method.
func (m *MockSDKInterface) SaveEnclaveCACert(caCert, txId string, withSyncResult bool, timeout int64) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEnclaveCACert", caCert, txId, withSyncResult, timeout)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveEnclaveCACert indicates an expected call of SaveEnclaveCACert.
func (mr *MockSDKInterfaceMockRecorder) SaveEnclaveCACert(caCert, txId, withSyncResult, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEnclaveCACert", reflect.TypeOf((*MockSDKInterface)(nil).SaveEnclaveCACert), caCert, txId, withSyncResult, timeout)
}

// SaveEnclaveReport mocks base method.
func (m *MockSDKInterface) SaveEnclaveReport(enclaveId, report, txId string, withSyncResult bool, timeout int64) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEnclaveReport", enclaveId, report, txId, withSyncResult, timeout)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveEnclaveReport indicates an expected call of SaveEnclaveReport.
func (mr *MockSDKInterfaceMockRecorder) SaveEnclaveReport(enclaveId, report, txId, withSyncResult, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEnclaveReport", reflect.TypeOf((*MockSDKInterface)(nil).SaveEnclaveReport), enclaveId, report, txId, withSyncResult, timeout)
}

// SaveRemoteAttestationProof mocks base method.
func (m *MockSDKInterface) SaveRemoteAttestationProof(proof, txId string, withSyncResult bool, timeout int64) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRemoteAttestationProof", proof, txId, withSyncResult, timeout)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRemoteAttestationProof indicates an expected call of SaveRemoteAttestationProof.
func (mr *MockSDKInterfaceMockRecorder) SaveRemoteAttestationProof(proof, txId, withSyncResult, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRemoteAttestationProof", reflect.TypeOf((*MockSDKInterface)(nil).SaveRemoteAttestationProof), proof, txId, withSyncResult, timeout)
}

// SendArchiveBlockRequest mocks base method.
func (m *MockSDKInterface) SendArchiveBlockRequest(payload *common.Payload, timeout int64) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendArchiveBlockRequest", payload, timeout)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendArchiveBlockRequest indicates an expected call of SendArchiveBlockRequest.
func (mr *MockSDKInterfaceMockRecorder) SendArchiveBlockRequest(payload, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendArchiveBlockRequest", reflect.TypeOf((*MockSDKInterface)(nil).SendArchiveBlockRequest), payload, timeout)
}

// SendCertManageRequest mocks base method.
func (m *MockSDKInterface) SendCertManageRequest(payload *common.Payload, endorsers []*common.EndorsementEntry, timeout int64, withSyncResult bool) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCertManageRequest", payload, endorsers, timeout, withSyncResult)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCertManageRequest indicates an expected call of SendCertManageRequest.
func (mr *MockSDKInterfaceMockRecorder) SendCertManageRequest(payload, endorsers, timeout, withSyncResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCertManageRequest", reflect.TypeOf((*MockSDKInterface)(nil).SendCertManageRequest), payload, endorsers, timeout, withSyncResult)
}

// SendChainConfigUpdateRequest mocks base method.
func (m *MockSDKInterface) SendChainConfigUpdateRequest(payload *common.Payload, endorsers []*common.EndorsementEntry, timeout int64, withSyncResult bool) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChainConfigUpdateRequest", payload, endorsers, timeout, withSyncResult)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChainConfigUpdateRequest indicates an expected call of SendChainConfigUpdateRequest.
func (mr *MockSDKInterfaceMockRecorder) SendChainConfigUpdateRequest(payload, endorsers, timeout, withSyncResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChainConfigUpdateRequest", reflect.TypeOf((*MockSDKInterface)(nil).SendChainConfigUpdateRequest), payload, endorsers, timeout, withSyncResult)
}

// SendContractManageRequest mocks base method.
func (m *MockSDKInterface) SendContractManageRequest(payload *common.Payload, endorsers []*common.EndorsementEntry, timeout int64, withSyncResult bool) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendContractManageRequest", payload, endorsers, timeout, withSyncResult)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendContractManageRequest indicates an expected call of SendContractManageRequest.
func (mr *MockSDKInterfaceMockRecorder) SendContractManageRequest(payload, endorsers, timeout, withSyncResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendContractManageRequest", reflect.TypeOf((*MockSDKInterface)(nil).SendContractManageRequest), payload, endorsers, timeout, withSyncResult)
}

// SendRestoreBlockRequest mocks base method.
func (m *MockSDKInterface) SendRestoreBlockRequest(payload *common.Payload, timeout int64) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRestoreBlockRequest", payload, timeout)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRestoreBlockRequest indicates an expected call of SendRestoreBlockRequest.
func (mr *MockSDKInterfaceMockRecorder) SendRestoreBlockRequest(payload, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRestoreBlockRequest", reflect.TypeOf((*MockSDKInterface)(nil).SendRestoreBlockRequest), payload, timeout)
}

// SendTxRequest mocks base method.
func (m *MockSDKInterface) SendTxRequest(txRequest *common.TxRequest, timeout int64, withSyncResult bool) (*common.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTxRequest", txRequest, timeout, withSyncResult)
	ret0, _ := ret[0].(*common.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTxRequest indicates an expected call of SendTxRequest.
func (mr *MockSDKInterfaceMockRecorder) SendTxRequest(txRequest, timeout, withSyncResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTxRequest", reflect.TypeOf((*MockSDKInterface)(nil).SendTxRequest), txRequest, timeout, withSyncResult)
}

// SignArchivePayload mocks base method.
func (m *MockSDKInterface) SignArchivePayload(payload *common.Payload) (*common.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignArchivePayload", payload)
	ret0, _ := ret[0].(*common.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignArchivePayload indicates an expected call of SignArchivePayload.
func (mr *MockSDKInterfaceMockRecorder) SignArchivePayload(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignArchivePayload", reflect.TypeOf((*MockSDKInterface)(nil).SignArchivePayload), payload)
}

// SignCertManagePayload mocks base method.
func (m *MockSDKInterface) SignCertManagePayload(payload *common.Payload) (*common.EndorsementEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignCertManagePayload", payload)
	ret0, _ := ret[0].(*common.EndorsementEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignCertManagePayload indicates an expected call of SignCertManagePayload.
func (mr *MockSDKInterfaceMockRecorder) SignCertManagePayload(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignCertManagePayload", reflect.TypeOf((*MockSDKInterface)(nil).SignCertManagePayload), payload)
}

// SignChainConfigPayload mocks base method.
func (m *MockSDKInterface) SignChainConfigPayload(payload *common.Payload) (*common.EndorsementEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignChainConfigPayload", payload)
	ret0, _ := ret[0].(*common.EndorsementEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignChainConfigPayload indicates an expected call of SignChainConfigPayload.
func (mr *MockSDKInterfaceMockRecorder) SignChainConfigPayload(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignChainConfigPayload", reflect.TypeOf((*MockSDKInterface)(nil).SignChainConfigPayload), payload)
}

// SignContractManagePayload mocks base method.
func (m *MockSDKInterface) SignContractManagePayload(payload *common.Payload) (*common.EndorsementEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignContractManagePayload", payload)
	ret0, _ := ret[0].(*common.EndorsementEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignContractManagePayload indicates an expected call of SignContractManagePayload.
func (mr *MockSDKInterfaceMockRecorder) SignContractManagePayload(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignContractManagePayload", reflect.TypeOf((*MockSDKInterface)(nil).SignContractManagePayload), payload)
}

// Stop mocks base method.
func (m *MockSDKInterface) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockSDKInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSDKInterface)(nil).Stop))
}

// Subscribe mocks base method.
func (m *MockSDKInterface) Subscribe(ctx context.Context, payloadBytes *common.Payload) (<-chan interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, payloadBytes)
	ret0, _ := ret[0].(<-chan interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSDKInterfaceMockRecorder) Subscribe(ctx, payloadBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSDKInterface)(nil).Subscribe), ctx, payloadBytes)
}

// SubscribeBlock mocks base method.
func (m *MockSDKInterface) SubscribeBlock(ctx context.Context, startBlock, endBlock int64, withRWSet, onlyHeader bool) (<-chan interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeBlock", ctx, startBlock, endBlock, withRWSet, onlyHeader)
	ret0, _ := ret[0].(<-chan interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeBlock indicates an expected call of SubscribeBlock.
func (mr *MockSDKInterfaceMockRecorder) SubscribeBlock(ctx, startBlock, endBlock, withRWSet, onlyHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBlock", reflect.TypeOf((*MockSDKInterface)(nil).SubscribeBlock), ctx, startBlock, endBlock, withRWSet, onlyHeader)
}

// SubscribeContractEvent mocks base method.
func (m *MockSDKInterface) SubscribeContractEvent(ctx context.Context, topic, contractName string) (<-chan interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeContractEvent", ctx, topic, contractName)
	ret0, _ := ret[0].(<-chan interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeContractEvent indicates an expected call of SubscribeContractEvent.
func (mr *MockSDKInterfaceMockRecorder) SubscribeContractEvent(ctx, topic, contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeContractEvent", reflect.TypeOf((*MockSDKInterface)(nil).SubscribeContractEvent), ctx, topic, contractName)
}

// SubscribeTx mocks base method.
func (m *MockSDKInterface) SubscribeTx(ctx context.Context, startBlock, endBlock int64, contractName string, txIds []string) (<-chan interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTx", ctx, startBlock, endBlock, contractName, txIds)
	ret0, _ := ret[0].(<-chan interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeTx indicates an expected call of SubscribeTx.
func (mr *MockSDKInterfaceMockRecorder) SubscribeTx(ctx, startBlock, endBlock, contractName, txIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTx", reflect.TypeOf((*MockSDKInterface)(nil).SubscribeTx), ctx, startBlock, endBlock, contractName, txIds)
}
