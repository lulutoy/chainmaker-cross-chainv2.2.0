// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/shawnshen/workspace/ChainMaker/chainmaker-cross-chain/contract/fabric/transaction_contract/vendor/github.com/hyperledger/fabric-contract-api-go/contractapi/transaction_context.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cid "github.com/hyperledger/fabric-chaincode-go/pkg/cid"
	shim "github.com/hyperledger/fabric-chaincode-go/shim"
)

// MockTransactionContextInterface is a mock of TransactionContextInterface interface.
type MockTransactionContextInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionContextInterfaceMockRecorder
}

// MockTransactionContextInterfaceMockRecorder is the mock recorder for MockTransactionContextInterface.
type MockTransactionContextInterfaceMockRecorder struct {
	mock *MockTransactionContextInterface
}

// NewMockTransactionContextInterface creates a new mock instance.
func NewMockTransactionContextInterface(ctrl *gomock.Controller) *MockTransactionContextInterface {
	mock := &MockTransactionContextInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionContextInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionContextInterface) EXPECT() *MockTransactionContextInterfaceMockRecorder {
	return m.recorder
}

// GetClientIdentity mocks base method.
func (m *MockTransactionContextInterface) GetClientIdentity() cid.ClientIdentity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientIdentity")
	ret0, _ := ret[0].(cid.ClientIdentity)
	return ret0
}

// GetClientIdentity indicates an expected call of GetClientIdentity.
func (mr *MockTransactionContextInterfaceMockRecorder) GetClientIdentity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientIdentity", reflect.TypeOf((*MockTransactionContextInterface)(nil).GetClientIdentity))
}

// GetStub mocks base method.
func (m *MockTransactionContextInterface) GetStub() shim.ChaincodeStubInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStub")
	ret0, _ := ret[0].(shim.ChaincodeStubInterface)
	return ret0
}

// GetStub indicates an expected call of GetStub.
func (mr *MockTransactionContextInterfaceMockRecorder) GetStub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStub", reflect.TypeOf((*MockTransactionContextInterface)(nil).GetStub))
}

// MockSettableTransactionContextInterface is a mock of SettableTransactionContextInterface interface.
type MockSettableTransactionContextInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSettableTransactionContextInterfaceMockRecorder
}

// MockSettableTransactionContextInterfaceMockRecorder is the mock recorder for MockSettableTransactionContextInterface.
type MockSettableTransactionContextInterfaceMockRecorder struct {
	mock *MockSettableTransactionContextInterface
}

// NewMockSettableTransactionContextInterface creates a new mock instance.
func NewMockSettableTransactionContextInterface(ctrl *gomock.Controller) *MockSettableTransactionContextInterface {
	mock := &MockSettableTransactionContextInterface{ctrl: ctrl}
	mock.recorder = &MockSettableTransactionContextInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettableTransactionContextInterface) EXPECT() *MockSettableTransactionContextInterfaceMockRecorder {
	return m.recorder
}

// SetClientIdentity mocks base method.
func (m *MockSettableTransactionContextInterface) SetClientIdentity(ci cid.ClientIdentity) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClientIdentity", ci)
}

// SetClientIdentity indicates an expected call of SetClientIdentity.
func (mr *MockSettableTransactionContextInterfaceMockRecorder) SetClientIdentity(ci interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientIdentity", reflect.TypeOf((*MockSettableTransactionContextInterface)(nil).SetClientIdentity), ci)
}

// SetStub mocks base method.
func (m *MockSettableTransactionContextInterface) SetStub(arg0 shim.ChaincodeStubInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStub", arg0)
}

// SetStub indicates an expected call of SetStub.
func (mr *MockSettableTransactionContextInterfaceMockRecorder) SetStub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStub", reflect.TypeOf((*MockSettableTransactionContextInterface)(nil).SetStub), arg0)
}
